-- ========================================
-- AURORA COACHES - COMPLETE SETUP (FIXED)
-- Script completo con schema corretto per Flutter
-- ========================================

-- Drop existing triggers first
DROP TRIGGER IF EXISTS update_categories_updated_at ON categories;
DROP TRIGGER IF EXISTS update_trainings_updated_at ON trainings;
DROP TRIGGER IF EXISTS update_players_updated_at ON players;
DROP TRIGGER IF EXISTS update_staff_updated_at ON staff;
DROP TRIGGER IF EXISTS update_communications_updated_at ON communications;
DROP TRIGGER IF EXISTS update_notices_updated_at ON notices;
DROP TRIGGER IF EXISTS update_fields_updated_at ON fields;

-- Drop functions if exist
DROP FUNCTION IF EXISTS update_updated_at_column();
DROP FUNCTION IF EXISTS update_trainings_updated_at();

-- Drop existing tables if they exist (in correct order for foreign keys)
DROP TABLE IF EXISTS trainings CASCADE;
DROP TABLE IF EXISTS players CASCADE;  
DROP TABLE IF EXISTS staff CASCADE;
DROP TABLE IF EXISTS communications CASCADE;
DROP TABLE IF EXISTS notices CASCADE;
DROP TABLE IF EXISTS fields CASCADE;
DROP TABLE IF EXISTS categories CASCADE;

-- Create categories table (base table)
CREATE TABLE categories (
    id SERIAL PRIMARY KEY,
    name VARCHAR(50) NOT NULL UNIQUE,
    description TEXT,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- Create fields table (corrected schema)
CREATE TABLE fields (
    id SERIAL PRIMARY KEY,
    name VARCHAR(100) NOT NULL,                    -- Nome campo
    type VARCHAR(50) NOT NULL,                     -- Tipo campo
    dimensions VARCHAR(50),                        -- Dimensioni
    capacity VARCHAR(50),                          -- Capienza
    available BOOLEAN DEFAULT TRUE,                -- Disponibile
    lighting BOOLEAN DEFAULT FALSE,                -- Illuminazione
    notes TEXT,                                    -- Note (usato anche come address)
    user_id UUID REFERENCES auth.users(id),       -- ID utente
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- Create trainings table (CORRECTED to match Flutter model)
CREATE TABLE trainings (
    id SERIAL PRIMARY KEY,
    team_category VARCHAR(50) NOT NULL,           -- Categoria squadra (Flutter: teamCategory)
    weekday INTEGER NOT NULL CHECK (weekday >= 1 AND weekday <= 5),  -- Giorno settimana 1-5
    start_time VARCHAR(10) NOT NULL,              -- Ora inizio "18:00" (Flutter: startTime)
    end_time VARCHAR(10) NOT NULL,                -- Ora fine "19:30" (Flutter: endTime)
    field_code VARCHAR(10) NOT NULL,              -- Codice campo "CA", "CB" (Flutter: fieldCode)
    week_start DATE NOT NULL,                     -- Inizio settimana (Flutter: weekStart)
    user_id UUID REFERENCES auth.users(id),      -- ID utente (Flutter: userId)
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    
    -- Constraint per evitare duplicati
    UNIQUE (team_category, weekday, week_start)
);

-- Create players table (corrected schema)
CREATE TABLE players (
    id SERIAL PRIMARY KEY,
    name VARCHAR(100) NOT NULL,                    -- Nome giocatore
    category VARCHAR(50) NOT NULL,                 -- Categoria squadra
    position VARCHAR(50),                          -- Posizione
    jersey_number INTEGER,                         -- Numero maglia
    birth_date DATE,                               -- Data nascita
    phone VARCHAR(20),                             -- Telefono
    email VARCHAR(100),                            -- Email
    notes TEXT,                                    -- Note
    user_id UUID REFERENCES auth.users(id),       -- ID utente
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    FOREIGN KEY (category) REFERENCES categories(name) ON DELETE CASCADE,
    UNIQUE (category, jersey_number)               -- Numero maglia unico per categoria
);

-- Create staff table
CREATE TABLE staff (
    id SERIAL PRIMARY KEY,
    name VARCHAR(100) NOT NULL,                    -- Nome staff
    category VARCHAR(50) NOT NULL,                 -- Categoria squadra
    role VARCHAR(100) NOT NULL,                    -- Ruolo
    phone VARCHAR(20),                             -- Telefono
    email VARCHAR(100),                            -- Email
    notes TEXT,                                    -- Note
    user_id UUID REFERENCES auth.users(id),       -- ID utente
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    FOREIGN KEY (category) REFERENCES categories(name) ON DELETE CASCADE
);

-- Create communications table
CREATE TABLE communications (
    id SERIAL PRIMARY KEY,
    title VARCHAR(200) NOT NULL,                   -- Titolo
    content TEXT NOT NULL,                         -- Contenuto
    publication_date TIMESTAMP WITH TIME ZONE DEFAULT NOW(),  -- Data pubblicazione
    important BOOLEAN DEFAULT FALSE,               -- Importante
    category VARCHAR(50),                          -- Categoria
    user_id UUID REFERENCES auth.users(id),       -- ID utente
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- Create notices table
CREATE TABLE notices (
    id SERIAL PRIMARY KEY,
    title VARCHAR(200) NOT NULL,                   -- Titolo
    content TEXT NOT NULL,                         -- Contenuto
    publication_date TIMESTAMP WITH TIME ZONE DEFAULT NOW(),  -- Data pubblicazione
    important BOOLEAN DEFAULT FALSE,               -- Importante
    category VARCHAR(50),                          -- Categoria
    user_id UUID REFERENCES auth.users(id),       -- ID utente
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- Insert default categories
INSERT INTO categories (name, description) VALUES
('U12', 'Under 12 - Youth Development'),
('U14', 'Under 14 - Youth Development'), 
('U15', 'Under 15 - Competitive Youth'),
('U16', 'Under 16 - Competitive Youth'),
('U17', 'Under 17 - Competitive Youth'),
('U18', 'Under 18 - Competitive Youth'),
('U19', 'Under 19 - Junior Team'),
('First Team', 'First Team - Senior Squad');

-- Insert default fields
INSERT INTO fields (name, type, dimensions, capacity, available, lighting, notes) VALUES
('Campo A - Principale', 'Natural grass', '105x68 meters', '500 spectators', TRUE, TRUE, 'Main field for official matches'),
('Campo B - Allenamento', 'Synthetic grass', '100x64 meters', '200 spectators', TRUE, TRUE, 'Training field'),
('Campo C - Settore Giovanile', 'Synthetic grass', '80x50 meters', '100 spectators', FALSE, FALSE, 'Under renovation'),
('Palestra Coperta', 'Parquet', '40x20 meters', '150 spectators', TRUE, TRUE, 'Indoor activities'),
('Campo Sintetico', 'Synthetic grass', '95x60 meters', '300 spectators', TRUE, TRUE, 'Additional training field');

-- Create indexes for better performance
CREATE INDEX idx_trainings_team_category ON trainings(team_category);
CREATE INDEX idx_trainings_weekday ON trainings(weekday);
CREATE INDEX idx_trainings_week_start ON trainings(week_start);
CREATE INDEX idx_trainings_user_id ON trainings(user_id);
CREATE INDEX idx_players_category ON players(category);
CREATE INDEX idx_players_jersey ON players(category, jersey_number);
CREATE INDEX idx_staff_category ON staff(category);
CREATE INDEX idx_communications_date ON communications(publication_date);
CREATE INDEX idx_notices_date ON notices(publication_date);
CREATE INDEX idx_fields_available ON fields(available);

-- Trigger function to automatically update updated_at
CREATE OR REPLACE FUNCTION update_updated_at_column()
RETURNS TRIGGER AS $$
BEGIN
    NEW.updated_at = NOW();
    RETURN NEW;
END;
$$ language 'plpgsql';

-- Create specific trigger function for trainings
CREATE OR REPLACE FUNCTION update_trainings_updated_at()
RETURNS TRIGGER AS $$
BEGIN
    NEW.updated_at = NOW();
    RETURN NEW;
END;
$$ language 'plpgsql';

-- Create triggers for all tables
CREATE TRIGGER update_categories_updated_at 
    BEFORE UPDATE ON categories 
    FOR EACH ROW 
    EXECUTE FUNCTION update_updated_at_column();

CREATE TRIGGER update_trainings_updated_at 
    BEFORE UPDATE ON trainings 
    FOR EACH ROW 
    EXECUTE FUNCTION update_trainings_updated_at();

CREATE TRIGGER update_players_updated_at 
    BEFORE UPDATE ON players 
    FOR EACH ROW 
    EXECUTE FUNCTION update_updated_at_column();

CREATE TRIGGER update_staff_updated_at 
    BEFORE UPDATE ON staff 
    FOR EACH ROW 
    EXECUTE FUNCTION update_updated_at_column();

CREATE TRIGGER update_communications_updated_at 
    BEFORE UPDATE ON communications 
    FOR EACH ROW 
    EXECUTE FUNCTION update_updated_at_column();

CREATE TRIGGER update_notices_updated_at 
    BEFORE UPDATE ON notices 
    FOR EACH ROW 
    EXECUTE FUNCTION update_updated_at_column();

CREATE TRIGGER update_fields_updated_at 
    BEFORE UPDATE ON fields 
    FOR EACH ROW 
    EXECUTE FUNCTION update_updated_at_column();

-- Enable Row Level Security (RLS)
ALTER TABLE categories ENABLE ROW LEVEL SECURITY;
ALTER TABLE trainings ENABLE ROW LEVEL SECURITY;
ALTER TABLE players ENABLE ROW LEVEL SECURITY;
ALTER TABLE staff ENABLE ROW LEVEL SECURITY;
ALTER TABLE communications ENABLE ROW LEVEL SECURITY;
ALTER TABLE notices ENABLE ROW LEVEL SECURITY;
ALTER TABLE fields ENABLE ROW LEVEL SECURITY;

-- Drop existing policies if they exist
DROP POLICY IF EXISTS "Public read access" ON categories;
DROP POLICY IF EXISTS "Public read access" ON trainings;
DROP POLICY IF EXISTS "Public read access" ON players;
DROP POLICY IF EXISTS "Public read access" ON staff;
DROP POLICY IF EXISTS "Public read access" ON communications;
DROP POLICY IF EXISTS "Public read access" ON notices;
DROP POLICY IF EXISTS "Public read access" ON fields;

DROP POLICY IF EXISTS "Public insert access" ON categories;
DROP POLICY IF EXISTS "Public insert access" ON trainings;
DROP POLICY IF EXISTS "Public insert access" ON players;
DROP POLICY IF EXISTS "Public insert access" ON staff;
DROP POLICY IF EXISTS "Public insert access" ON communications;
DROP POLICY IF EXISTS "Public insert access" ON notices;
DROP POLICY IF EXISTS "Public insert access" ON fields;

DROP POLICY IF EXISTS "Public update access" ON categories;
DROP POLICY IF EXISTS "Public update access" ON trainings;
DROP POLICY IF EXISTS "Public update access" ON players;
DROP POLICY IF EXISTS "Public update access" ON staff;
DROP POLICY IF EXISTS "Public update access" ON communications;
DROP POLICY IF EXISTS "Public update access" ON notices;
DROP POLICY IF EXISTS "Public update access" ON fields;

DROP POLICY IF EXISTS "Public delete access" ON categories;
DROP POLICY IF EXISTS "Public delete access" ON trainings;
DROP POLICY IF EXISTS "Public delete access" ON players;
DROP POLICY IF EXISTS "Public delete access" ON staff;
DROP POLICY IF EXISTS "Public delete access" ON communications;
DROP POLICY IF EXISTS "Public delete access" ON notices;
DROP POLICY IF EXISTS "Public delete access" ON fields;

-- Create policies for public access
CREATE POLICY "Public read access" ON categories FOR SELECT USING (true);
CREATE POLICY "Public read access" ON trainings FOR SELECT USING (true);
CREATE POLICY "Public read access" ON players FOR SELECT USING (true);
CREATE POLICY "Public read access" ON staff FOR SELECT USING (true);
CREATE POLICY "Public read access" ON communications FOR SELECT USING (true);
CREATE POLICY "Public read access" ON notices FOR SELECT USING (true);
CREATE POLICY "Public read access" ON fields FOR SELECT USING (true);

CREATE POLICY "Public insert access" ON categories FOR INSERT WITH CHECK (true);
CREATE POLICY "Public insert access" ON trainings FOR INSERT WITH CHECK (true);
CREATE POLICY "Public insert access" ON players FOR INSERT WITH CHECK (true);
CREATE POLICY "Public insert access" ON staff FOR INSERT WITH CHECK (true);
CREATE POLICY "Public insert access" ON communications FOR INSERT WITH CHECK (true);
CREATE POLICY "Public insert access" ON notices FOR INSERT WITH CHECK (true);
CREATE POLICY "Public insert access" ON fields FOR INSERT WITH CHECK (true);

CREATE POLICY "Public update access" ON categories FOR UPDATE USING (true);
CREATE POLICY "Public update access" ON trainings FOR UPDATE USING (true);
CREATE POLICY "Public update access" ON players FOR UPDATE USING (true);
CREATE POLICY "Public update access" ON staff FOR UPDATE USING (true);
CREATE POLICY "Public update access" ON communications FOR UPDATE USING (true);
CREATE POLICY "Public update access" ON notices FOR UPDATE USING (true);
CREATE POLICY "Public update access" ON fields FOR UPDATE USING (true);

CREATE POLICY "Public delete access" ON categories FOR DELETE USING (true);
CREATE POLICY "Public delete access" ON trainings FOR DELETE USING (true);
CREATE POLICY "Public delete access" ON players FOR DELETE USING (true);
CREATE POLICY "Public delete access" ON staff FOR DELETE USING (true);
CREATE POLICY "Public delete access" ON communications FOR DELETE USING (true);
CREATE POLICY "Public delete access" ON notices FOR DELETE USING (true);
CREATE POLICY "Public delete access" ON fields FOR DELETE USING (true);

-- Insert sample data for testing
INSERT INTO trainings (team_category, weekday, start_time, end_time, field_code, week_start) VALUES
('U19', 1, '18:00', '19:30', 'CA', '2024-01-15'),     -- Lunedì
('U17', 2, '17:00', '18:30', 'CB', '2024-01-15'),     -- Martedì  
('U15', 3, '16:30', '18:00', 'CC', '2024-01-15'),     -- Mercoledì
('U19', 4, '18:30', '20:00', 'CA', '2024-01-15'),     -- Giovedì
('U17', 5, '17:30', '19:00', 'CB', '2024-01-15');     -- Venerdì

INSERT INTO players (name, category, position, jersey_number, birth_date, phone, email) VALUES
('Marco Rossi', 'U19', 'Forward', 10, '2005-03-15', '+39 123 456 7890', 'marco.rossi@example.com'),
('Luca Bianchi', 'U17', 'Midfielder', 8, '2007-07-22', '+39 098 765 4321', 'luca.bianchi@example.com'),
('Andrea Verdi', 'U15', 'Defender', 5, '2009-01-10', '+39 111 222 3333', 'andrea.verdi@example.com');

INSERT INTO staff (name, category, role, phone, email) VALUES
('Antonio Conte', 'U19', 'Head Coach', '+39 123 456 7890', 'antonio.conte@aurorase.it'),
('Paolo Maldini', 'U17', 'Athletic Trainer', '+39 098 765 4321', 'paolo.maldini@aurorase.it'),
('Franco Baresi', 'U15', 'Youth Coach', '+39 111 222 3333', 'franco.baresi@aurorase.it');

-- Final success messages
SELECT 'SUCCESS: Complete Aurora Coaches database setup completed!' as result;
SELECT 'Schema: CORRECTED to match Flutter models exactly' as schema;
SELECT 'Tables: categories, trainings, players, staff, fields, communications, notices' as tables;
SELECT 'RLS enabled with public policies for development' as security;
SELECT 'Sample data inserted for immediate testing' as data;
SELECT 'Ready for production use!' as status;
